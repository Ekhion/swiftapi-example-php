<?php
namespace org\phybros\thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


interface SwiftApiIf {
  public function addToWhitelist($authString, $name);
  public function announce($authString, $message);
  public function ban($authString, $name);
  public function banIp($authString, $ip);
  public function deOp($authString, $name, $notifyPlayer);
  public function getBannedIps($authString);
  public function getBannedPlayers($authString);
  public function getBukkitVersion($authString);
  public function getConsoleMessages($authString, $since);
  public function getFileContents($authString, $fileName);
  public function getOfflinePlayer($authString, $name);
  public function getOfflinePlayers($authString);
  public function getOps($authString);
  public function getPlayer($authString, $name);
  public function getPlayers($authString);
  public function getPlugin($authString, $name);
  public function getPlugins($authString);
  public function getServer($authString);
  public function getServerVersion($authString);
  public function getWhitelist($authString);
  public function getWorld($authString, $worldName);
  public function getWorlds($authString);
  public function installPlugin($authString, $downloadUrl, $md5);
  public function kick($authString, $name, $message);
  public function op($authString, $name, $notifyPlayer);
  public function ping($authString);
  public function reloadServer($authString);
  public function removeFromWhitelist($authString, $name);
  public function replacePlugin($authString, $pluginName, $downloadUrl, $md5);
  public function runConsoleCommand($authString, $command);
  public function saveWorld($authString, $worldName);
  public function setFileContents($authString, $fileName, $fileContents);
  public function setGameMode($authString, $name, $mode);
  public function setPvp($authString, $worldName, $isPvp);
  public function setStorm($authString, $worldName, $hasStorm);
  public function setThundering($authString, $worldName, $isThundering);
  public function setWorldTime($authString, $worldName, $time);
  public function unBan($authString, $name);
  public function unBanIp($authString, $ip);
}

class SwiftApiClient implements \org\phybros\thrift\SwiftApiIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function addToWhitelist($authString, $name)
  {
    $this->send_addToWhitelist($authString, $name);
    return $this->recv_addToWhitelist();
  }

  public function send_addToWhitelist($authString, $name)
  {
    $args = new \org\phybros\thrift\SwiftApi_addToWhitelist_args();
    $args->authString = $authString;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addToWhitelist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addToWhitelist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addToWhitelist()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_addToWhitelist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_addToWhitelist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("addToWhitelist failed: unknown result");
  }

  public function announce($authString, $message)
  {
    $this->send_announce($authString, $message);
    return $this->recv_announce();
  }

  public function send_announce($authString, $message)
  {
    $args = new \org\phybros\thrift\SwiftApi_announce_args();
    $args->authString = $authString;
    $args->message = $message;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'announce', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('announce', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_announce()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_announce_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_announce_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("announce failed: unknown result");
  }

  public function ban($authString, $name)
  {
    $this->send_ban($authString, $name);
    return $this->recv_ban();
  }

  public function send_ban($authString, $name)
  {
    $args = new \org\phybros\thrift\SwiftApi_ban_args();
    $args->authString = $authString;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ban', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ban', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ban()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_ban_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_ban_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("ban failed: unknown result");
  }

  public function banIp($authString, $ip)
  {
    $this->send_banIp($authString, $ip);
    return $this->recv_banIp();
  }

  public function send_banIp($authString, $ip)
  {
    $args = new \org\phybros\thrift\SwiftApi_banIp_args();
    $args->authString = $authString;
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'banIp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('banIp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_banIp()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_banIp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_banIp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("banIp failed: unknown result");
  }

  public function deOp($authString, $name, $notifyPlayer)
  {
    $this->send_deOp($authString, $name, $notifyPlayer);
    return $this->recv_deOp();
  }

  public function send_deOp($authString, $name, $notifyPlayer)
  {
    $args = new \org\phybros\thrift\SwiftApi_deOp_args();
    $args->authString = $authString;
    $args->name = $name;
    $args->notifyPlayer = $notifyPlayer;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deOp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deOp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deOp()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_deOp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_deOp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("deOp failed: unknown result");
  }

  public function getBannedIps($authString)
  {
    $this->send_getBannedIps($authString);
    return $this->recv_getBannedIps();
  }

  public function send_getBannedIps($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getBannedIps_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBannedIps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBannedIps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBannedIps()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getBannedIps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getBannedIps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getBannedIps failed: unknown result");
  }

  public function getBannedPlayers($authString)
  {
    $this->send_getBannedPlayers($authString);
    return $this->recv_getBannedPlayers();
  }

  public function send_getBannedPlayers($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getBannedPlayers_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBannedPlayers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBannedPlayers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBannedPlayers()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getBannedPlayers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getBannedPlayers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getBannedPlayers failed: unknown result");
  }

  public function getBukkitVersion($authString)
  {
    $this->send_getBukkitVersion($authString);
    return $this->recv_getBukkitVersion();
  }

  public function send_getBukkitVersion($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getBukkitVersion_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getBukkitVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getBukkitVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getBukkitVersion()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getBukkitVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getBukkitVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getBukkitVersion failed: unknown result");
  }

  public function getConsoleMessages($authString, $since)
  {
    $this->send_getConsoleMessages($authString, $since);
    return $this->recv_getConsoleMessages();
  }

  public function send_getConsoleMessages($authString, $since)
  {
    $args = new \org\phybros\thrift\SwiftApi_getConsoleMessages_args();
    $args->authString = $authString;
    $args->since = $since;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getConsoleMessages', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getConsoleMessages', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getConsoleMessages()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getConsoleMessages_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getConsoleMessages_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getConsoleMessages failed: unknown result");
  }

  public function getFileContents($authString, $fileName)
  {
    $this->send_getFileContents($authString, $fileName);
    return $this->recv_getFileContents();
  }

  public function send_getFileContents($authString, $fileName)
  {
    $args = new \org\phybros\thrift\SwiftApi_getFileContents_args();
    $args->authString = $authString;
    $args->fileName = $fileName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFileContents', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFileContents', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFileContents()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getFileContents_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getFileContents_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("getFileContents failed: unknown result");
  }

  public function getOfflinePlayer($authString, $name)
  {
    $this->send_getOfflinePlayer($authString, $name);
    return $this->recv_getOfflinePlayer();
  }

  public function send_getOfflinePlayer($authString, $name)
  {
    $args = new \org\phybros\thrift\SwiftApi_getOfflinePlayer_args();
    $args->authString = $authString;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOfflinePlayer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOfflinePlayer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOfflinePlayer()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getOfflinePlayer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getOfflinePlayer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("getOfflinePlayer failed: unknown result");
  }

  public function getOfflinePlayers($authString)
  {
    $this->send_getOfflinePlayers($authString);
    return $this->recv_getOfflinePlayers();
  }

  public function send_getOfflinePlayers($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getOfflinePlayers_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOfflinePlayers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOfflinePlayers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOfflinePlayers()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getOfflinePlayers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getOfflinePlayers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getOfflinePlayers failed: unknown result");
  }

  public function getOps($authString)
  {
    $this->send_getOps($authString);
    return $this->recv_getOps();
  }

  public function send_getOps($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getOps_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOps()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getOps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getOps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getOps failed: unknown result");
  }

  public function getPlayer($authString, $name)
  {
    $this->send_getPlayer($authString, $name);
    return $this->recv_getPlayer();
  }

  public function send_getPlayer($authString, $name)
  {
    $args = new \org\phybros\thrift\SwiftApi_getPlayer_args();
    $args->authString = $authString;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPlayer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPlayer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPlayer()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getPlayer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getPlayer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("getPlayer failed: unknown result");
  }

  public function getPlayers($authString)
  {
    $this->send_getPlayers($authString);
    return $this->recv_getPlayers();
  }

  public function send_getPlayers($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getPlayers_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPlayers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPlayers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPlayers()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getPlayers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getPlayers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getPlayers failed: unknown result");
  }

  public function getPlugin($authString, $name)
  {
    $this->send_getPlugin($authString, $name);
    return $this->recv_getPlugin();
  }

  public function send_getPlugin($authString, $name)
  {
    $args = new \org\phybros\thrift\SwiftApi_getPlugin_args();
    $args->authString = $authString;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPlugin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPlugin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPlugin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getPlugin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getPlugin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("getPlugin failed: unknown result");
  }

  public function getPlugins($authString)
  {
    $this->send_getPlugins($authString);
    return $this->recv_getPlugins();
  }

  public function send_getPlugins($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getPlugins_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPlugins', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPlugins', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPlugins()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getPlugins_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getPlugins_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getPlugins failed: unknown result");
  }

  public function getServer($authString)
  {
    $this->send_getServer($authString);
    return $this->recv_getServer();
  }

  public function send_getServer($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getServer_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServer()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getServer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getServer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getServer failed: unknown result");
  }

  public function getServerVersion($authString)
  {
    $this->send_getServerVersion($authString);
    return $this->recv_getServerVersion();
  }

  public function send_getServerVersion($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getServerVersion_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerVersion()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getServerVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getServerVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getServerVersion failed: unknown result");
  }

  public function getWhitelist($authString)
  {
    $this->send_getWhitelist($authString);
    return $this->recv_getWhitelist();
  }

  public function send_getWhitelist($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getWhitelist_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getWhitelist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getWhitelist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getWhitelist()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getWhitelist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getWhitelist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getWhitelist failed: unknown result");
  }

  public function getWorld($authString, $worldName)
  {
    $this->send_getWorld($authString, $worldName);
    return $this->recv_getWorld();
  }

  public function send_getWorld($authString, $worldName)
  {
    $args = new \org\phybros\thrift\SwiftApi_getWorld_args();
    $args->authString = $authString;
    $args->worldName = $worldName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getWorld', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getWorld', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getWorld()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getWorld_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getWorld_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("getWorld failed: unknown result");
  }

  public function getWorlds($authString)
  {
    $this->send_getWorlds($authString);
    return $this->recv_getWorlds();
  }

  public function send_getWorlds($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_getWorlds_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getWorlds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getWorlds', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getWorlds()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_getWorlds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_getWorlds_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("getWorlds failed: unknown result");
  }

  public function installPlugin($authString, $downloadUrl, $md5)
  {
    $this->send_installPlugin($authString, $downloadUrl, $md5);
    return $this->recv_installPlugin();
  }

  public function send_installPlugin($authString, $downloadUrl, $md5)
  {
    $args = new \org\phybros\thrift\SwiftApi_installPlugin_args();
    $args->authString = $authString;
    $args->downloadUrl = $downloadUrl;
    $args->md5 = $md5;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'installPlugin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('installPlugin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_installPlugin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_installPlugin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_installPlugin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("installPlugin failed: unknown result");
  }

  public function kick($authString, $name, $message)
  {
    $this->send_kick($authString, $name, $message);
    return $this->recv_kick();
  }

  public function send_kick($authString, $name, $message)
  {
    $args = new \org\phybros\thrift\SwiftApi_kick_args();
    $args->authString = $authString;
    $args->name = $name;
    $args->message = $message;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'kick', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('kick', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_kick()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_kick_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_kick_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("kick failed: unknown result");
  }

  public function op($authString, $name, $notifyPlayer)
  {
    $this->send_op($authString, $name, $notifyPlayer);
    return $this->recv_op();
  }

  public function send_op($authString, $name, $notifyPlayer)
  {
    $args = new \org\phybros\thrift\SwiftApi_op_args();
    $args->authString = $authString;
    $args->name = $name;
    $args->notifyPlayer = $notifyPlayer;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'op', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('op', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_op()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_op_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_op_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("op failed: unknown result");
  }

  public function ping($authString)
  {
    $this->send_ping($authString);
    return $this->recv_ping();
  }

  public function send_ping($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_ping_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function reloadServer($authString)
  {
    $this->send_reloadServer($authString);
  }

  public function send_reloadServer($authString)
  {
    $args = new \org\phybros\thrift\SwiftApi_reloadServer_args();
    $args->authString = $authString;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reloadServer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reloadServer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function removeFromWhitelist($authString, $name)
  {
    $this->send_removeFromWhitelist($authString, $name);
    return $this->recv_removeFromWhitelist();
  }

  public function send_removeFromWhitelist($authString, $name)
  {
    $args = new \org\phybros\thrift\SwiftApi_removeFromWhitelist_args();
    $args->authString = $authString;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeFromWhitelist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeFromWhitelist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeFromWhitelist()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_removeFromWhitelist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_removeFromWhitelist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("removeFromWhitelist failed: unknown result");
  }

  public function replacePlugin($authString, $pluginName, $downloadUrl, $md5)
  {
    $this->send_replacePlugin($authString, $pluginName, $downloadUrl, $md5);
    return $this->recv_replacePlugin();
  }

  public function send_replacePlugin($authString, $pluginName, $downloadUrl, $md5)
  {
    $args = new \org\phybros\thrift\SwiftApi_replacePlugin_args();
    $args->authString = $authString;
    $args->pluginName = $pluginName;
    $args->downloadUrl = $downloadUrl;
    $args->md5 = $md5;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'replacePlugin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('replacePlugin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_replacePlugin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_replacePlugin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_replacePlugin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("replacePlugin failed: unknown result");
  }

  public function runConsoleCommand($authString, $command)
  {
    $this->send_runConsoleCommand($authString, $command);
  }

  public function send_runConsoleCommand($authString, $command)
  {
    $args = new \org\phybros\thrift\SwiftApi_runConsoleCommand_args();
    $args->authString = $authString;
    $args->command = $command;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'runConsoleCommand', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('runConsoleCommand', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function saveWorld($authString, $worldName)
  {
    $this->send_saveWorld($authString, $worldName);
    return $this->recv_saveWorld();
  }

  public function send_saveWorld($authString, $worldName)
  {
    $args = new \org\phybros\thrift\SwiftApi_saveWorld_args();
    $args->authString = $authString;
    $args->worldName = $worldName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'saveWorld', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('saveWorld', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_saveWorld()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_saveWorld_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_saveWorld_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("saveWorld failed: unknown result");
  }

  public function setFileContents($authString, $fileName, $fileContents)
  {
    $this->send_setFileContents($authString, $fileName, $fileContents);
    return $this->recv_setFileContents();
  }

  public function send_setFileContents($authString, $fileName, $fileContents)
  {
    $args = new \org\phybros\thrift\SwiftApi_setFileContents_args();
    $args->authString = $authString;
    $args->fileName = $fileName;
    $args->fileContents = $fileContents;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFileContents', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFileContents', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setFileContents()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_setFileContents_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_setFileContents_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("setFileContents failed: unknown result");
  }

  public function setGameMode($authString, $name, $mode)
  {
    $this->send_setGameMode($authString, $name, $mode);
    return $this->recv_setGameMode();
  }

  public function send_setGameMode($authString, $name, $mode)
  {
    $args = new \org\phybros\thrift\SwiftApi_setGameMode_args();
    $args->authString = $authString;
    $args->name = $name;
    $args->mode = $mode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setGameMode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setGameMode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setGameMode()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_setGameMode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_setGameMode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("setGameMode failed: unknown result");
  }

  public function setPvp($authString, $worldName, $isPvp)
  {
    $this->send_setPvp($authString, $worldName, $isPvp);
    return $this->recv_setPvp();
  }

  public function send_setPvp($authString, $worldName, $isPvp)
  {
    $args = new \org\phybros\thrift\SwiftApi_setPvp_args();
    $args->authString = $authString;
    $args->worldName = $worldName;
    $args->isPvp = $isPvp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setPvp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setPvp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setPvp()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_setPvp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_setPvp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("setPvp failed: unknown result");
  }

  public function setStorm($authString, $worldName, $hasStorm)
  {
    $this->send_setStorm($authString, $worldName, $hasStorm);
    return $this->recv_setStorm();
  }

  public function send_setStorm($authString, $worldName, $hasStorm)
  {
    $args = new \org\phybros\thrift\SwiftApi_setStorm_args();
    $args->authString = $authString;
    $args->worldName = $worldName;
    $args->hasStorm = $hasStorm;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setStorm', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setStorm', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setStorm()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_setStorm_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_setStorm_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("setStorm failed: unknown result");
  }

  public function setThundering($authString, $worldName, $isThundering)
  {
    $this->send_setThundering($authString, $worldName, $isThundering);
    return $this->recv_setThundering();
  }

  public function send_setThundering($authString, $worldName, $isThundering)
  {
    $args = new \org\phybros\thrift\SwiftApi_setThundering_args();
    $args->authString = $authString;
    $args->worldName = $worldName;
    $args->isThundering = $isThundering;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setThundering', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setThundering', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setThundering()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_setThundering_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_setThundering_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("setThundering failed: unknown result");
  }

  public function setWorldTime($authString, $worldName, $time)
  {
    $this->send_setWorldTime($authString, $worldName, $time);
    return $this->recv_setWorldTime();
  }

  public function send_setWorldTime($authString, $worldName, $time)
  {
    $args = new \org\phybros\thrift\SwiftApi_setWorldTime_args();
    $args->authString = $authString;
    $args->worldName = $worldName;
    $args->time = $time;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setWorldTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setWorldTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setWorldTime()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_setWorldTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_setWorldTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("setWorldTime failed: unknown result");
  }

  public function unBan($authString, $name)
  {
    $this->send_unBan($authString, $name);
    return $this->recv_unBan();
  }

  public function send_unBan($authString, $name)
  {
    $args = new \org\phybros\thrift\SwiftApi_unBan_args();
    $args->authString = $authString;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unBan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unBan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unBan()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_unBan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_unBan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("unBan failed: unknown result");
  }

  public function unBanIp($authString, $ip)
  {
    $this->send_unBanIp($authString, $ip);
    return $this->recv_unBanIp();
  }

  public function send_unBanIp($authString, $ip)
  {
    $args = new \org\phybros\thrift\SwiftApi_unBanIp_args();
    $args->authString = $authString;
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unBanIp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unBanIp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unBanIp()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\org\phybros\thrift\SwiftApi_unBanIp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \org\phybros\thrift\SwiftApi_unBanIp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->aex !== null) {
      throw $result->aex;
    }
    if ($result->dex !== null) {
      throw $result->dex;
    }
    throw new \Exception("unBanIp failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class SwiftApi_addToWhitelist_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_addToWhitelist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_addToWhitelist_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_addToWhitelist_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_addToWhitelist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_addToWhitelist_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_announce_args {
  static $_TSPEC;

  public $authString = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_announce_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_announce_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_announce_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_announce_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_announce_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_ban_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_ban_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_ban_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_ban_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_ban_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_ban_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_banIp_args {
  static $_TSPEC;

  public $authString = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_banIp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_banIp_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 2);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_banIp_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_banIp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_banIp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_deOp_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;
  public $notifyPlayer = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'notifyPlayer',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['notifyPlayer'])) {
        $this->notifyPlayer = $vals['notifyPlayer'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_deOp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notifyPlayer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_deOp_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifyPlayer !== null) {
      $xfer += $output->writeFieldBegin('notifyPlayer', TType::BOOL, 3);
      $xfer += $output->writeBool($this->notifyPlayer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_deOp_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_deOp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_deOp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getBannedIps_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getBannedIps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getBannedIps_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getBannedIps_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getBannedIps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size65 = 0;
            $_etype68 = 0;
            $xfer += $input->readListBegin($_etype68, $_size65);
            for ($_i69 = 0; $_i69 < $_size65; ++$_i69)
            {
              $elem70 = null;
              $xfer += $input->readString($elem70);
              $this->success []= $elem70;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getBannedIps_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter71)
          {
            $xfer += $output->writeString($iter71);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getBannedPlayers_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getBannedPlayers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getBannedPlayers_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getBannedPlayers_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\OfflinePlayer',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getBannedPlayers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $elem77 = new \org\phybros\thrift\OfflinePlayer();
              $xfer += $elem77->read($input);
              $this->success []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getBannedPlayers_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter78)
          {
            $xfer += $iter78->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getBukkitVersion_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getBukkitVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getBukkitVersion_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getBukkitVersion_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getBukkitVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getBukkitVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getConsoleMessages_args {
  static $_TSPEC;

  public $authString = null;
  public $since = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'since',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['since'])) {
        $this->since = $vals['since'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getConsoleMessages_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->since);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getConsoleMessages_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->since !== null) {
      $xfer += $output->writeFieldBegin('since', TType::I64, 2);
      $xfer += $output->writeI64($this->since);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getConsoleMessages_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\ConsoleLine',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getConsoleMessages_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size79 = 0;
            $_etype82 = 0;
            $xfer += $input->readListBegin($_etype82, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $elem84 = null;
              $elem84 = new \org\phybros\thrift\ConsoleLine();
              $xfer += $elem84->read($input);
              $this->success []= $elem84;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getConsoleMessages_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter85)
          {
            $xfer += $iter85->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getFileContents_args {
  static $_TSPEC;

  public $authString = null;
  public $fileName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['fileName'])) {
        $this->fileName = $vals['fileName'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getFileContents_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getFileContents_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileName !== null) {
      $xfer += $output->writeFieldBegin('fileName', TType::STRING, 2);
      $xfer += $output->writeString($this->fileName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getFileContents_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getFileContents_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getFileContents_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getOfflinePlayer_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getOfflinePlayer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getOfflinePlayer_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getOfflinePlayer_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\OfflinePlayer',
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getOfflinePlayer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \org\phybros\thrift\OfflinePlayer();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getOfflinePlayer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getOfflinePlayers_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getOfflinePlayers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getOfflinePlayers_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getOfflinePlayers_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\OfflinePlayer',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getOfflinePlayers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size86 = 0;
            $_etype89 = 0;
            $xfer += $input->readListBegin($_etype89, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $elem91 = null;
              $elem91 = new \org\phybros\thrift\OfflinePlayer();
              $xfer += $elem91->read($input);
              $this->success []= $elem91;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getOfflinePlayers_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter92)
          {
            $xfer += $iter92->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getOps_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getOps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getOps_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getOps_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\OfflinePlayer',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getOps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size93 = 0;
            $_etype96 = 0;
            $xfer += $input->readListBegin($_etype96, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $elem98 = null;
              $elem98 = new \org\phybros\thrift\OfflinePlayer();
              $xfer += $elem98->read($input);
              $this->success []= $elem98;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getOps_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter99)
          {
            $xfer += $iter99->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlayer_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlayer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlayer_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlayer_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\Player',
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlayer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \org\phybros\thrift\Player();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlayer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlayers_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlayers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlayers_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlayers_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\Player',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlayers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size100 = 0;
            $_etype103 = 0;
            $xfer += $input->readListBegin($_etype103, $_size100);
            for ($_i104 = 0; $_i104 < $_size100; ++$_i104)
            {
              $elem105 = null;
              $elem105 = new \org\phybros\thrift\Player();
              $xfer += $elem105->read($input);
              $this->success []= $elem105;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlayers_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter106)
          {
            $xfer += $iter106->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlugin_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlugin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlugin_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlugin_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\Plugin',
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlugin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \org\phybros\thrift\Plugin();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlugin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlugins_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlugins_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlugins_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getPlugins_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\Plugin',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getPlugins_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size107 = 0;
            $_etype110 = 0;
            $xfer += $input->readListBegin($_etype110, $_size107);
            for ($_i111 = 0; $_i111 < $_size107; ++$_i111)
            {
              $elem112 = null;
              $elem112 = new \org\phybros\thrift\Plugin();
              $xfer += $elem112->read($input);
              $this->success []= $elem112;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getPlugins_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter113)
          {
            $xfer += $iter113->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getServer_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getServer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getServer_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getServer_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\Server',
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getServer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \org\phybros\thrift\Server();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getServer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getServerVersion_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getServerVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getServerVersion_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getServerVersion_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getServerVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getServerVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getWhitelist_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getWhitelist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getWhitelist_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getWhitelist_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\OfflinePlayer',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getWhitelist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size114 = 0;
            $_etype117 = 0;
            $xfer += $input->readListBegin($_etype117, $_size114);
            for ($_i118 = 0; $_i118 < $_size114; ++$_i118)
            {
              $elem119 = null;
              $elem119 = new \org\phybros\thrift\OfflinePlayer();
              $xfer += $elem119->read($input);
              $this->success []= $elem119;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getWhitelist_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter120)
          {
            $xfer += $iter120->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getWorld_args {
  static $_TSPEC;

  public $authString = null;
  public $worldName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'worldName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['worldName'])) {
        $this->worldName = $vals['worldName'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getWorld_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worldName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getWorld_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worldName !== null) {
      $xfer += $output->writeFieldBegin('worldName', TType::STRING, 2);
      $xfer += $output->writeString($this->worldName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getWorld_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\World',
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getWorld_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \org\phybros\thrift\World();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getWorld_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getWorlds_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getWorlds_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getWorlds_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_getWorlds_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\World',
            ),
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_getWorlds_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size121 = 0;
            $_etype124 = 0;
            $xfer += $input->readListBegin($_etype124, $_size121);
            for ($_i125 = 0; $_i125 < $_size121; ++$_i125)
            {
              $elem126 = null;
              $elem126 = new \org\phybros\thrift\World();
              $xfer += $elem126->read($input);
              $this->success []= $elem126;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_getWorlds_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter127)
          {
            $xfer += $iter127->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_installPlugin_args {
  static $_TSPEC;

  public $authString = null;
  public $downloadUrl = null;
  public $md5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'downloadUrl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'md5',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['md5'])) {
        $this->md5 = $vals['md5'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_installPlugin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->md5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_installPlugin_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->md5 !== null) {
      $xfer += $output->writeFieldBegin('md5', TType::STRING, 3);
      $xfer += $output->writeString($this->md5);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_installPlugin_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_installPlugin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_installPlugin_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_kick_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_kick_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_kick_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_kick_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_kick_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_kick_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_op_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;
  public $notifyPlayer = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'notifyPlayer',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['notifyPlayer'])) {
        $this->notifyPlayer = $vals['notifyPlayer'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_op_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notifyPlayer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_op_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifyPlayer !== null) {
      $xfer += $output->writeFieldBegin('notifyPlayer', TType::BOOL, 3);
      $xfer += $output->writeBool($this->notifyPlayer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_op_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_op_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_op_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_ping_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_ping_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_ping_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_ping_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_ping_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_ping_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_reloadServer_args {
  static $_TSPEC;

  public $authString = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_reloadServer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_reloadServer_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_removeFromWhitelist_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_removeFromWhitelist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_removeFromWhitelist_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_removeFromWhitelist_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_removeFromWhitelist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_removeFromWhitelist_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_replacePlugin_args {
  static $_TSPEC;

  public $authString = null;
  public $pluginName = null;
  public $downloadUrl = null;
  public $md5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pluginName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'downloadUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'md5',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['pluginName'])) {
        $this->pluginName = $vals['pluginName'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['md5'])) {
        $this->md5 = $vals['md5'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_replacePlugin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pluginName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->md5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_replacePlugin_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pluginName !== null) {
      $xfer += $output->writeFieldBegin('pluginName', TType::STRING, 2);
      $xfer += $output->writeString($this->pluginName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->md5 !== null) {
      $xfer += $output->writeFieldBegin('md5', TType::STRING, 4);
      $xfer += $output->writeString($this->md5);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_replacePlugin_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_replacePlugin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_replacePlugin_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_runConsoleCommand_args {
  static $_TSPEC;

  public $authString = null;
  public $command = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'command',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['command'])) {
        $this->command = $vals['command'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_runConsoleCommand_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->command);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_runConsoleCommand_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->command !== null) {
      $xfer += $output->writeFieldBegin('command', TType::STRING, 2);
      $xfer += $output->writeString($this->command);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_saveWorld_args {
  static $_TSPEC;

  public $authString = null;
  public $worldName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'worldName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['worldName'])) {
        $this->worldName = $vals['worldName'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_saveWorld_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worldName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_saveWorld_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worldName !== null) {
      $xfer += $output->writeFieldBegin('worldName', TType::STRING, 2);
      $xfer += $output->writeString($this->worldName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_saveWorld_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_saveWorld_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_saveWorld_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setFileContents_args {
  static $_TSPEC;

  public $authString = null;
  public $fileName = null;
  public $fileContents = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fileContents',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['fileName'])) {
        $this->fileName = $vals['fileName'];
      }
      if (isset($vals['fileContents'])) {
        $this->fileContents = $vals['fileContents'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setFileContents_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileContents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setFileContents_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileName !== null) {
      $xfer += $output->writeFieldBegin('fileName', TType::STRING, 2);
      $xfer += $output->writeString($this->fileName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileContents !== null) {
      $xfer += $output->writeFieldBegin('fileContents', TType::STRING, 3);
      $xfer += $output->writeString($this->fileContents);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setFileContents_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setFileContents_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setFileContents_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setGameMode_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;
  public $mode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setGameMode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setGameMode_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 3);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setGameMode_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setGameMode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setGameMode_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setPvp_args {
  static $_TSPEC;

  public $authString = null;
  public $worldName = null;
  public $isPvp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'worldName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'isPvp',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['worldName'])) {
        $this->worldName = $vals['worldName'];
      }
      if (isset($vals['isPvp'])) {
        $this->isPvp = $vals['isPvp'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setPvp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worldName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isPvp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setPvp_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worldName !== null) {
      $xfer += $output->writeFieldBegin('worldName', TType::STRING, 2);
      $xfer += $output->writeString($this->worldName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPvp !== null) {
      $xfer += $output->writeFieldBegin('isPvp', TType::BOOL, 3);
      $xfer += $output->writeBool($this->isPvp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setPvp_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setPvp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setPvp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setStorm_args {
  static $_TSPEC;

  public $authString = null;
  public $worldName = null;
  public $hasStorm = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'worldName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'hasStorm',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['worldName'])) {
        $this->worldName = $vals['worldName'];
      }
      if (isset($vals['hasStorm'])) {
        $this->hasStorm = $vals['hasStorm'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setStorm_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worldName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasStorm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setStorm_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worldName !== null) {
      $xfer += $output->writeFieldBegin('worldName', TType::STRING, 2);
      $xfer += $output->writeString($this->worldName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasStorm !== null) {
      $xfer += $output->writeFieldBegin('hasStorm', TType::BOOL, 3);
      $xfer += $output->writeBool($this->hasStorm);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setStorm_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setStorm_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setStorm_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setThundering_args {
  static $_TSPEC;

  public $authString = null;
  public $worldName = null;
  public $isThundering = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'worldName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'isThundering',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['worldName'])) {
        $this->worldName = $vals['worldName'];
      }
      if (isset($vals['isThundering'])) {
        $this->isThundering = $vals['isThundering'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setThundering_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worldName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isThundering);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setThundering_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worldName !== null) {
      $xfer += $output->writeFieldBegin('worldName', TType::STRING, 2);
      $xfer += $output->writeString($this->worldName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isThundering !== null) {
      $xfer += $output->writeFieldBegin('isThundering', TType::BOOL, 3);
      $xfer += $output->writeBool($this->isThundering);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setThundering_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setThundering_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setThundering_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setWorldTime_args {
  static $_TSPEC;

  public $authString = null;
  public $worldName = null;
  public $time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'worldName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['worldName'])) {
        $this->worldName = $vals['worldName'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setWorldTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->worldName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setWorldTime_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worldName !== null) {
      $xfer += $output->writeFieldBegin('worldName', TType::STRING, 2);
      $xfer += $output->writeString($this->worldName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 3);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_setWorldTime_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_setWorldTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_setWorldTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_unBan_args {
  static $_TSPEC;

  public $authString = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_unBan_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_unBan_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_unBan_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_unBan_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_unBan_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_unBanIp_args {
  static $_TSPEC;

  public $authString = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authString'])) {
        $this->authString = $vals['authString'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_unBanIp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_unBanIp_args');
    if ($this->authString !== null) {
      $xfer += $output->writeFieldBegin('authString', TType::STRING, 1);
      $xfer += $output->writeString($this->authString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 2);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SwiftApi_unBanIp_result {
  static $_TSPEC;

  public $success = null;
  public $aex = null;
  public $dex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'aex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EAuthException',
          ),
        2 => array(
          'var' => 'dex',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\EDataException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['aex'])) {
        $this->aex = $vals['aex'];
      }
      if (isset($vals['dex'])) {
        $this->dex = $vals['dex'];
      }
    }
  }

  public function getName() {
    return 'SwiftApi_unBanIp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->aex = new \org\phybros\thrift\EAuthException();
            $xfer += $this->aex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->dex = new \org\phybros\thrift\EDataException();
            $xfer += $this->dex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SwiftApi_unBanIp_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aex !== null) {
      $xfer += $output->writeFieldBegin('aex', TType::STRUCT, 1);
      $xfer += $this->aex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dex !== null) {
      $xfer += $output->writeFieldBegin('dex', TType::STRUCT, 2);
      $xfer += $this->dex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


