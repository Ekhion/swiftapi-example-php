<?php
namespace org\phybros\thrift;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;

final class ErrorCode {
  const INVALID_REQUEST = 0;
  const INVALID_AUTHSTRING = 1;
  const NOT_FOUND = 2;
  const DOWNLOAD_ERROR = 3;
  const FILE_ERROR = 4;
  const NO_READ = 5;
  static public $__names = array(
    0 => 'INVALID_REQUEST',
    1 => 'INVALID_AUTHSTRING',
    2 => 'NOT_FOUND',
    3 => 'DOWNLOAD_ERROR',
    4 => 'FILE_ERROR',
    5 => 'NO_READ',
  );
}

class EDataException extends TException {
  static $_TSPEC;

  public $code = null;
  public $errorMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMessage',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMessage'])) {
        $this->errorMessage = $vals['errorMessage'];
      }
    }
  }

  public function getName() {
    return 'EDataException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EDataException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMessage !== null) {
      $xfer += $output->writeFieldBegin('errorMessage', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EAuthException extends TException {
  static $_TSPEC;

  public $code = null;
  public $errorMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMessage',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['errorMessage'])) {
        $this->errorMessage = $vals['errorMessage'];
      }
    }
  }

  public function getName() {
    return 'EAuthException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EAuthException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMessage !== null) {
      $xfer += $output->writeFieldBegin('errorMessage', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Difficulty {
  const PEACEFUL = 0;
  const EASY = 1;
  const NORMAL = 2;
  const HARD = 3;
  static public $__names = array(
    0 => 'PEACEFUL',
    1 => 'EASY',
    2 => 'NORMAL',
    3 => 'HARD',
  );
}

final class Environment {
  const NETHER = 0;
  const NORMAL = 1;
  const THE_END = 2;
  static public $__names = array(
    0 => 'NETHER',
    1 => 'NORMAL',
    2 => 'THE_END',
  );
}

final class GameMode {
  const SURVIVAL = 0;
  const CREATIVE = 1;
  const ADVENTURE = 2;
  static public $__names = array(
    0 => 'SURVIVAL',
    1 => 'CREATIVE',
    2 => 'ADVENTURE',
  );
}

final class Enchantment {
  const PROTECTION_ENVIRONMENTAL = 0;
  const PROTECTION_FIRE = 1;
  const PROTECTION_FALL = 2;
  const PROTECTION_EXPLOSIONS = 3;
  const PROTECTION_PROJECTILE = 4;
  const OXYGEN = 5;
  const WATER_WORKER = 6;
  const DAMAGE_ALL = 16;
  const DAMAGE_UNDEAD = 17;
  const DAMAGE_ARTHROPODS = 18;
  const KNOCKBACK = 19;
  const FIRE_ASPECT = 20;
  const LOOT_BONUS_MOBS = 21;
  const DIG_SPEED = 32;
  const SILK_TOUCH = 33;
  const DURABILITY = 34;
  const LOOT_BONUS_BLOCKS = 35;
  const ARROW_DAMAGE = 48;
  const ARROW_KNOCKBACK = 49;
  const ARROW_FIRE = 50;
  const ARROW_INFINITE = 51;
  static public $__names = array(
    0 => 'PROTECTION_ENVIRONMENTAL',
    1 => 'PROTECTION_FIRE',
    2 => 'PROTECTION_FALL',
    3 => 'PROTECTION_EXPLOSIONS',
    4 => 'PROTECTION_PROJECTILE',
    5 => 'OXYGEN',
    6 => 'WATER_WORKER',
    16 => 'DAMAGE_ALL',
    17 => 'DAMAGE_UNDEAD',
    18 => 'DAMAGE_ARTHROPODS',
    19 => 'KNOCKBACK',
    20 => 'FIRE_ASPECT',
    21 => 'LOOT_BONUS_MOBS',
    32 => 'DIG_SPEED',
    33 => 'SILK_TOUCH',
    34 => 'DURABILITY',
    35 => 'LOOT_BONUS_BLOCKS',
    48 => 'ARROW_DAMAGE',
    49 => 'ARROW_KNOCKBACK',
    50 => 'ARROW_FIRE',
    51 => 'ARROW_INFINITE',
  );
}

class ConsoleLine {
  static $_TSPEC;

  public $timestamp = null;
  public $message = null;
  public $level = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'level',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
    }
  }

  public function getName() {
    return 'ConsoleLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConsoleLine');
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 1);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::STRING, 3);
      $xfer += $output->writeString($this->level);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Location {
  static $_TSPEC;

  public $x = null;
  public $y = null;
  public $z = null;
  public $pitch = null;
  public $yaw = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'x',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'y',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'z',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'pitch',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'yaw',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
      if (isset($vals['y'])) {
        $this->y = $vals['y'];
      }
      if (isset($vals['z'])) {
        $this->z = $vals['z'];
      }
      if (isset($vals['pitch'])) {
        $this->pitch = $vals['pitch'];
      }
      if (isset($vals['yaw'])) {
        $this->yaw = $vals['yaw'];
      }
    }
  }

  public function getName() {
    return 'Location';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pitch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->yaw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Location');
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->x);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y !== null) {
      $xfer += $output->writeFieldBegin('y', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->y);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z !== null) {
      $xfer += $output->writeFieldBegin('z', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->z);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pitch !== null) {
      $xfer += $output->writeFieldBegin('pitch', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->pitch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yaw !== null) {
      $xfer += $output->writeFieldBegin('yaw', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->yaw);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ItemStack {
  static $_TSPEC;

  public $amount = null;
  public $typeId = null;
  public $durability = null;
  public $enchantments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'typeId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'durability',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'enchantments',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['durability'])) {
        $this->durability = $vals['durability'];
      }
      if (isset($vals['enchantments'])) {
        $this->enchantments = $vals['enchantments'];
      }
    }
  }

  public function getName() {
    return 'ItemStack';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->durability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->enchantments = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = 0;
              $xfer += $input->readI32($key5);
              $xfer += $input->readI32($val6);
              $this->enchantments[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ItemStack');
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 1);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 2);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->durability !== null) {
      $xfer += $output->writeFieldBegin('durability', TType::I32, 3);
      $xfer += $output->writeI32($this->durability);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enchantments !== null) {
      if (!is_array($this->enchantments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('enchantments', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::I32, TType::I32, count($this->enchantments));
        {
          foreach ($this->enchantments as $kiter7 => $viter8)
          {
            $xfer += $output->writeI32($kiter7);
            $xfer += $output->writeI32($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PlayerArmor {
  static $_TSPEC;

  public $helmet = null;
  public $chestplate = null;
  public $leggings = null;
  public $boots = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'helmet',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\ItemStack',
          ),
        2 => array(
          'var' => 'chestplate',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\ItemStack',
          ),
        3 => array(
          'var' => 'leggings',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\ItemStack',
          ),
        4 => array(
          'var' => 'boots',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\ItemStack',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['helmet'])) {
        $this->helmet = $vals['helmet'];
      }
      if (isset($vals['chestplate'])) {
        $this->chestplate = $vals['chestplate'];
      }
      if (isset($vals['leggings'])) {
        $this->leggings = $vals['leggings'];
      }
      if (isset($vals['boots'])) {
        $this->boots = $vals['boots'];
      }
    }
  }

  public function getName() {
    return 'PlayerArmor';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->helmet = new \org\phybros\thrift\ItemStack();
            $xfer += $this->helmet->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->chestplate = new \org\phybros\thrift\ItemStack();
            $xfer += $this->chestplate->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->leggings = new \org\phybros\thrift\ItemStack();
            $xfer += $this->leggings->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->boots = new \org\phybros\thrift\ItemStack();
            $xfer += $this->boots->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PlayerArmor');
    if ($this->helmet !== null) {
      if (!is_object($this->helmet)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('helmet', TType::STRUCT, 1);
      $xfer += $this->helmet->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chestplate !== null) {
      if (!is_object($this->chestplate)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chestplate', TType::STRUCT, 2);
      $xfer += $this->chestplate->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leggings !== null) {
      if (!is_object($this->leggings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leggings', TType::STRUCT, 3);
      $xfer += $this->leggings->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boots !== null) {
      if (!is_object($this->boots)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('boots', TType::STRUCT, 4);
      $xfer += $this->boots->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PlayerInventory {
  static $_TSPEC;

  public $inventory = null;
  public $itemInHand = null;
  public $armor = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'inventory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\ItemStack',
            ),
          ),
        2 => array(
          'var' => 'itemInHand',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\ItemStack',
          ),
        3 => array(
          'var' => 'armor',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\PlayerArmor',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['inventory'])) {
        $this->inventory = $vals['inventory'];
      }
      if (isset($vals['itemInHand'])) {
        $this->itemInHand = $vals['itemInHand'];
      }
      if (isset($vals['armor'])) {
        $this->armor = $vals['armor'];
      }
    }
  }

  public function getName() {
    return 'PlayerInventory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->inventory = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $elem14 = new \org\phybros\thrift\ItemStack();
              $xfer += $elem14->read($input);
              $this->inventory []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->itemInHand = new \org\phybros\thrift\ItemStack();
            $xfer += $this->itemInHand->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->armor = new \org\phybros\thrift\PlayerArmor();
            $xfer += $this->armor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PlayerInventory');
    if ($this->inventory !== null) {
      if (!is_array($this->inventory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inventory', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->inventory));
        {
          foreach ($this->inventory as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemInHand !== null) {
      if (!is_object($this->itemInHand)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemInHand', TType::STRUCT, 2);
      $xfer += $this->itemInHand->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->armor !== null) {
      if (!is_object($this->armor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('armor', TType::STRUCT, 3);
      $xfer += $this->armor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Player {
  static $_TSPEC;

  public $name = null;
  public $gamemode = null;
  public $isSleeping = null;
  public $isSneaking = null;
  public $isSprinting = null;
  public $isInVehicle = null;
  public $xpToNextLevel = null;
  public $level = null;
  public $ip = null;
  public $isOp = null;
  public $foodLevel = null;
  public $health = null;
  public $exhaustion = null;
  public $firstPlayed = null;
  public $lastPlayed = null;
  public $isBanned = null;
  public $isWhitelisted = null;
  public $inventory = null;
  public $levelProgress = null;
  public $port = null;
  public $location = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'gamemode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'isSleeping',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'isSneaking',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'isSprinting',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'isInVehicle',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'xpToNextLevel',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'level',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'isOp',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'foodLevel',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'health',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'exhaustion',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'firstPlayed',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'lastPlayed',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'isBanned',
          'type' => TType::BOOL,
          ),
        17 => array(
          'var' => 'isWhitelisted',
          'type' => TType::BOOL,
          ),
        18 => array(
          'var' => 'inventory',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\PlayerInventory',
          ),
        19 => array(
          'var' => 'levelProgress',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'location',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\Location',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['gamemode'])) {
        $this->gamemode = $vals['gamemode'];
      }
      if (isset($vals['isSleeping'])) {
        $this->isSleeping = $vals['isSleeping'];
      }
      if (isset($vals['isSneaking'])) {
        $this->isSneaking = $vals['isSneaking'];
      }
      if (isset($vals['isSprinting'])) {
        $this->isSprinting = $vals['isSprinting'];
      }
      if (isset($vals['isInVehicle'])) {
        $this->isInVehicle = $vals['isInVehicle'];
      }
      if (isset($vals['xpToNextLevel'])) {
        $this->xpToNextLevel = $vals['xpToNextLevel'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['isOp'])) {
        $this->isOp = $vals['isOp'];
      }
      if (isset($vals['foodLevel'])) {
        $this->foodLevel = $vals['foodLevel'];
      }
      if (isset($vals['health'])) {
        $this->health = $vals['health'];
      }
      if (isset($vals['exhaustion'])) {
        $this->exhaustion = $vals['exhaustion'];
      }
      if (isset($vals['firstPlayed'])) {
        $this->firstPlayed = $vals['firstPlayed'];
      }
      if (isset($vals['lastPlayed'])) {
        $this->lastPlayed = $vals['lastPlayed'];
      }
      if (isset($vals['isBanned'])) {
        $this->isBanned = $vals['isBanned'];
      }
      if (isset($vals['isWhitelisted'])) {
        $this->isWhitelisted = $vals['isWhitelisted'];
      }
      if (isset($vals['inventory'])) {
        $this->inventory = $vals['inventory'];
      }
      if (isset($vals['levelProgress'])) {
        $this->levelProgress = $vals['levelProgress'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
    }
  }

  public function getName() {
    return 'Player';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gamemode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSleeping);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSneaking);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSprinting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isInVehicle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->xpToNextLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isOp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->foodLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->health);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->exhaustion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->firstPlayed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastPlayed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isBanned);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isWhitelisted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRUCT) {
            $this->inventory = new \org\phybros\thrift\PlayerInventory();
            $xfer += $this->inventory->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->levelProgress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->location = new \org\phybros\thrift\Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Player');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gamemode !== null) {
      $xfer += $output->writeFieldBegin('gamemode', TType::I32, 2);
      $xfer += $output->writeI32($this->gamemode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSleeping !== null) {
      $xfer += $output->writeFieldBegin('isSleeping', TType::BOOL, 3);
      $xfer += $output->writeBool($this->isSleeping);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSneaking !== null) {
      $xfer += $output->writeFieldBegin('isSneaking', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isSneaking);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSprinting !== null) {
      $xfer += $output->writeFieldBegin('isSprinting', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isSprinting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isInVehicle !== null) {
      $xfer += $output->writeFieldBegin('isInVehicle', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isInVehicle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xpToNextLevel !== null) {
      $xfer += $output->writeFieldBegin('xpToNextLevel', TType::I64, 7);
      $xfer += $output->writeI64($this->xpToNextLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::I32, 8);
      $xfer += $output->writeI32($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 9);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOp !== null) {
      $xfer += $output->writeFieldBegin('isOp', TType::BOOL, 10);
      $xfer += $output->writeBool($this->isOp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->foodLevel !== null) {
      $xfer += $output->writeFieldBegin('foodLevel', TType::I32, 11);
      $xfer += $output->writeI32($this->foodLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->health !== null) {
      $xfer += $output->writeFieldBegin('health', TType::I32, 12);
      $xfer += $output->writeI32($this->health);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exhaustion !== null) {
      $xfer += $output->writeFieldBegin('exhaustion', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->exhaustion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstPlayed !== null) {
      $xfer += $output->writeFieldBegin('firstPlayed', TType::I64, 14);
      $xfer += $output->writeI64($this->firstPlayed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastPlayed !== null) {
      $xfer += $output->writeFieldBegin('lastPlayed', TType::I64, 15);
      $xfer += $output->writeI64($this->lastPlayed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isBanned !== null) {
      $xfer += $output->writeFieldBegin('isBanned', TType::BOOL, 16);
      $xfer += $output->writeBool($this->isBanned);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isWhitelisted !== null) {
      $xfer += $output->writeFieldBegin('isWhitelisted', TType::BOOL, 17);
      $xfer += $output->writeBool($this->isWhitelisted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inventory !== null) {
      if (!is_object($this->inventory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inventory', TType::STRUCT, 18);
      $xfer += $this->inventory->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->levelProgress !== null) {
      $xfer += $output->writeFieldBegin('levelProgress', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->levelProgress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 20);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 21);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OfflinePlayer {
  static $_TSPEC;

  public $name = null;
  public $firstPlayed = null;
  public $lastPlayed = null;
  public $isOp = null;
  public $isBanned = null;
  public $isWhitelisted = null;
  public $player = null;
  public $hasPlayedBefore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'firstPlayed',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'lastPlayed',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'isOp',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'isBanned',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'isWhitelisted',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'player',
          'type' => TType::STRUCT,
          'class' => '\org\phybros\thrift\Player',
          ),
        8 => array(
          'var' => 'hasPlayedBefore',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['firstPlayed'])) {
        $this->firstPlayed = $vals['firstPlayed'];
      }
      if (isset($vals['lastPlayed'])) {
        $this->lastPlayed = $vals['lastPlayed'];
      }
      if (isset($vals['isOp'])) {
        $this->isOp = $vals['isOp'];
      }
      if (isset($vals['isBanned'])) {
        $this->isBanned = $vals['isBanned'];
      }
      if (isset($vals['isWhitelisted'])) {
        $this->isWhitelisted = $vals['isWhitelisted'];
      }
      if (isset($vals['player'])) {
        $this->player = $vals['player'];
      }
      if (isset($vals['hasPlayedBefore'])) {
        $this->hasPlayedBefore = $vals['hasPlayedBefore'];
      }
    }
  }

  public function getName() {
    return 'OfflinePlayer';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->firstPlayed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastPlayed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isOp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isBanned);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isWhitelisted);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->player = new \org\phybros\thrift\Player();
            $xfer += $this->player->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasPlayedBefore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OfflinePlayer');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstPlayed !== null) {
      $xfer += $output->writeFieldBegin('firstPlayed', TType::I64, 2);
      $xfer += $output->writeI64($this->firstPlayed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastPlayed !== null) {
      $xfer += $output->writeFieldBegin('lastPlayed', TType::I64, 3);
      $xfer += $output->writeI64($this->lastPlayed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOp !== null) {
      $xfer += $output->writeFieldBegin('isOp', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isOp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isBanned !== null) {
      $xfer += $output->writeFieldBegin('isBanned', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isBanned);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isWhitelisted !== null) {
      $xfer += $output->writeFieldBegin('isWhitelisted', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isWhitelisted);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->player !== null) {
      if (!is_object($this->player)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('player', TType::STRUCT, 7);
      $xfer += $this->player->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasPlayedBefore !== null) {
      $xfer += $output->writeFieldBegin('hasPlayedBefore', TType::BOOL, 8);
      $xfer += $output->writeBool($this->hasPlayedBefore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Plugin {
  static $_TSPEC;

  public $name = null;
  public $description = null;
  public $version = null;
  public $website = null;
  public $authors = null;
  public $enabled = null;
  public $fileName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'website',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'authors',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'enabled',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'fileName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['website'])) {
        $this->website = $vals['website'];
      }
      if (isset($vals['authors'])) {
        $this->authors = $vals['authors'];
      }
      if (isset($vals['enabled'])) {
        $this->enabled = $vals['enabled'];
      }
      if (isset($vals['fileName'])) {
        $this->fileName = $vals['fileName'];
      }
    }
  }

  public function getName() {
    return 'Plugin';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->website);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->authors = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readString($elem21);
              $this->authors []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fileName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Plugin');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 2);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 3);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->website !== null) {
      $xfer += $output->writeFieldBegin('website', TType::STRING, 4);
      $xfer += $output->writeString($this->website);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authors !== null) {
      if (!is_array($this->authors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authors', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->authors));
        {
          foreach ($this->authors as $iter22)
          {
            $xfer += $output->writeString($iter22);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enabled !== null) {
      $xfer += $output->writeFieldBegin('enabled', TType::BOOL, 6);
      $xfer += $output->writeBool($this->enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fileName !== null) {
      $xfer += $output->writeFieldBegin('fileName', TType::STRING, 7);
      $xfer += $output->writeString($this->fileName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class World {
  static $_TSPEC;

  public $name = null;
  public $time = null;
  public $hasStorm = null;
  public $isThundering = null;
  public $canGenerateStructures = null;
  public $allowAnimals = null;
  public $allowMonsters = null;
  public $difficulty = null;
  public $environment = null;
  public $fullTime = null;
  public $weatherDuration = null;
  public $seed = null;
  public $isPvp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'hasStorm',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'isThundering',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'canGenerateStructures',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'allowAnimals',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'allowMonsters',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'difficulty',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'environment',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'fullTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'weatherDuration',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'seed',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'isPvp',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['hasStorm'])) {
        $this->hasStorm = $vals['hasStorm'];
      }
      if (isset($vals['isThundering'])) {
        $this->isThundering = $vals['isThundering'];
      }
      if (isset($vals['canGenerateStructures'])) {
        $this->canGenerateStructures = $vals['canGenerateStructures'];
      }
      if (isset($vals['allowAnimals'])) {
        $this->allowAnimals = $vals['allowAnimals'];
      }
      if (isset($vals['allowMonsters'])) {
        $this->allowMonsters = $vals['allowMonsters'];
      }
      if (isset($vals['difficulty'])) {
        $this->difficulty = $vals['difficulty'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
      if (isset($vals['fullTime'])) {
        $this->fullTime = $vals['fullTime'];
      }
      if (isset($vals['weatherDuration'])) {
        $this->weatherDuration = $vals['weatherDuration'];
      }
      if (isset($vals['seed'])) {
        $this->seed = $vals['seed'];
      }
      if (isset($vals['isPvp'])) {
        $this->isPvp = $vals['isPvp'];
      }
    }
  }

  public function getName() {
    return 'World';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasStorm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isThundering);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->canGenerateStructures);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowAnimals);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowMonsters);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->difficulty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fullTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->weatherDuration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->seed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isPvp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('World');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 2);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasStorm !== null) {
      $xfer += $output->writeFieldBegin('hasStorm', TType::BOOL, 3);
      $xfer += $output->writeBool($this->hasStorm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isThundering !== null) {
      $xfer += $output->writeFieldBegin('isThundering', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isThundering);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canGenerateStructures !== null) {
      $xfer += $output->writeFieldBegin('canGenerateStructures', TType::BOOL, 5);
      $xfer += $output->writeBool($this->canGenerateStructures);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowAnimals !== null) {
      $xfer += $output->writeFieldBegin('allowAnimals', TType::BOOL, 6);
      $xfer += $output->writeBool($this->allowAnimals);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowMonsters !== null) {
      $xfer += $output->writeFieldBegin('allowMonsters', TType::BOOL, 7);
      $xfer += $output->writeBool($this->allowMonsters);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->difficulty !== null) {
      $xfer += $output->writeFieldBegin('difficulty', TType::I32, 8);
      $xfer += $output->writeI32($this->difficulty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::I32, 9);
      $xfer += $output->writeI32($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fullTime !== null) {
      $xfer += $output->writeFieldBegin('fullTime', TType::I64, 10);
      $xfer += $output->writeI64($this->fullTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weatherDuration !== null) {
      $xfer += $output->writeFieldBegin('weatherDuration', TType::I64, 11);
      $xfer += $output->writeI64($this->weatherDuration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seed !== null) {
      $xfer += $output->writeFieldBegin('seed', TType::I64, 12);
      $xfer += $output->writeI64($this->seed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPvp !== null) {
      $xfer += $output->writeFieldBegin('isPvp', TType::BOOL, 13);
      $xfer += $output->writeBool($this->isPvp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Server {
  static $_TSPEC;

  public $name = null;
  public $offlinePlayers = null;
  public $onlinePlayers = null;
  public $version = null;
  public $bukkitVersion = null;
  public $maxPlayers = null;
  public $ip = null;
  public $port = null;
  public $allowFlight = null;
  public $allowNether = null;
  public $allowEnd = null;
  public $whitelist = null;
  public $bannedPlayers = null;
  public $bannedIps = null;
  public $worlds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'offlinePlayers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\OfflinePlayer',
            ),
          ),
        3 => array(
          'var' => 'onlinePlayers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\Player',
            ),
          ),
        4 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bukkitVersion',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'maxPlayers',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'allowFlight',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'allowNether',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'allowEnd',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'whitelist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\OfflinePlayer',
            ),
          ),
        13 => array(
          'var' => 'bannedPlayers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\OfflinePlayer',
            ),
          ),
        14 => array(
          'var' => 'bannedIps',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        15 => array(
          'var' => 'worlds',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\org\phybros\thrift\World',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['offlinePlayers'])) {
        $this->offlinePlayers = $vals['offlinePlayers'];
      }
      if (isset($vals['onlinePlayers'])) {
        $this->onlinePlayers = $vals['onlinePlayers'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['bukkitVersion'])) {
        $this->bukkitVersion = $vals['bukkitVersion'];
      }
      if (isset($vals['maxPlayers'])) {
        $this->maxPlayers = $vals['maxPlayers'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['allowFlight'])) {
        $this->allowFlight = $vals['allowFlight'];
      }
      if (isset($vals['allowNether'])) {
        $this->allowNether = $vals['allowNether'];
      }
      if (isset($vals['allowEnd'])) {
        $this->allowEnd = $vals['allowEnd'];
      }
      if (isset($vals['whitelist'])) {
        $this->whitelist = $vals['whitelist'];
      }
      if (isset($vals['bannedPlayers'])) {
        $this->bannedPlayers = $vals['bannedPlayers'];
      }
      if (isset($vals['bannedIps'])) {
        $this->bannedIps = $vals['bannedIps'];
      }
      if (isset($vals['worlds'])) {
        $this->worlds = $vals['worlds'];
      }
    }
  }

  public function getName() {
    return 'Server';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->offlinePlayers = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $elem28 = new \org\phybros\thrift\OfflinePlayer();
              $xfer += $elem28->read($input);
              $this->offlinePlayers []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->onlinePlayers = array();
            $_size29 = 0;
            $_etype32 = 0;
            $xfer += $input->readListBegin($_etype32, $_size29);
            for ($_i33 = 0; $_i33 < $_size29; ++$_i33)
            {
              $elem34 = null;
              $elem34 = new \org\phybros\thrift\Player();
              $xfer += $elem34->read($input);
              $this->onlinePlayers []= $elem34;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bukkitVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxPlayers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowFlight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowNether);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->whitelist = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \org\phybros\thrift\OfflinePlayer();
              $xfer += $elem40->read($input);
              $this->whitelist []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->bannedPlayers = array();
            $_size41 = 0;
            $_etype44 = 0;
            $xfer += $input->readListBegin($_etype44, $_size41);
            for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
            {
              $elem46 = null;
              $elem46 = new \org\phybros\thrift\OfflinePlayer();
              $xfer += $elem46->read($input);
              $this->bannedPlayers []= $elem46;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::LST) {
            $this->bannedIps = array();
            $_size47 = 0;
            $_etype50 = 0;
            $xfer += $input->readListBegin($_etype50, $_size47);
            for ($_i51 = 0; $_i51 < $_size47; ++$_i51)
            {
              $elem52 = null;
              $xfer += $input->readString($elem52);
              $this->bannedIps []= $elem52;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->worlds = array();
            $_size53 = 0;
            $_etype56 = 0;
            $xfer += $input->readListBegin($_etype56, $_size53);
            for ($_i57 = 0; $_i57 < $_size53; ++$_i57)
            {
              $elem58 = null;
              $elem58 = new \org\phybros\thrift\World();
              $xfer += $elem58->read($input);
              $this->worlds []= $elem58;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Server');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlinePlayers !== null) {
      if (!is_array($this->offlinePlayers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('offlinePlayers', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->offlinePlayers));
        {
          foreach ($this->offlinePlayers as $iter59)
          {
            $xfer += $iter59->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onlinePlayers !== null) {
      if (!is_array($this->onlinePlayers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('onlinePlayers', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->onlinePlayers));
        {
          foreach ($this->onlinePlayers as $iter60)
          {
            $xfer += $iter60->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 4);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bukkitVersion !== null) {
      $xfer += $output->writeFieldBegin('bukkitVersion', TType::STRING, 5);
      $xfer += $output->writeString($this->bukkitVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPlayers !== null) {
      $xfer += $output->writeFieldBegin('maxPlayers', TType::I32, 6);
      $xfer += $output->writeI32($this->maxPlayers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 7);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 8);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowFlight !== null) {
      $xfer += $output->writeFieldBegin('allowFlight', TType::BOOL, 9);
      $xfer += $output->writeBool($this->allowFlight);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowNether !== null) {
      $xfer += $output->writeFieldBegin('allowNether', TType::BOOL, 10);
      $xfer += $output->writeBool($this->allowNether);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowEnd !== null) {
      $xfer += $output->writeFieldBegin('allowEnd', TType::BOOL, 11);
      $xfer += $output->writeBool($this->allowEnd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->whitelist !== null) {
      if (!is_array($this->whitelist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('whitelist', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->whitelist));
        {
          foreach ($this->whitelist as $iter61)
          {
            $xfer += $iter61->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannedPlayers !== null) {
      if (!is_array($this->bannedPlayers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bannedPlayers', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->bannedPlayers));
        {
          foreach ($this->bannedPlayers as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannedIps !== null) {
      if (!is_array($this->bannedIps)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('bannedIps', TType::LST, 14);
      {
        $output->writeListBegin(TType::STRING, count($this->bannedIps));
        {
          foreach ($this->bannedIps as $iter63)
          {
            $xfer += $output->writeString($iter63);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->worlds !== null) {
      if (!is_array($this->worlds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('worlds', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->worlds));
        {
          foreach ($this->worlds as $iter64)
          {
            $xfer += $iter64->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


